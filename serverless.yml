service: serverless-lambda-authorizer-jwt

frameworkVersion: '3'

plugins:
  - serverless-offline
  - serverless-dotenv-plugin

provider:
  name: aws
  runtime: nodejs16.x
  lambdaHashingVersion: 20201221
  memorySize: 128
  stage: dev
  region: sa-east-1
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - 'Fn::GetAtt': [UsersDynamoDBTable, Arn]
  environment:
    USERS_TABLE: '${self:service}-${self:provider.stage}-users'

functions:
  createUser:
    handler: create-user.handler
    events:
      - http:
          path: /users
          method: POST
          cors: true
          authorizer: authorizer

  getUser:
    handler: get-user.handler
    events:
      - http:
          path: /users/{id}
          method: GET
          cors: true
          authorizer: authorizer
          request:
            parameters:
              paths:
                id: true

  authenticateUser:
    handler: authenticate-user.handler
    events:
      - http:
          path: /login
          method: POST
          cors: true

  authorizer:
    handler: authorizer.handler

resources:
  Resources:
    UsersDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          - AttributeName: email
            AttributeType: S
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: email
            KeyType: HASH
          - AttributeName: id
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: '${self:service}-${self:provider.stage}-users'
